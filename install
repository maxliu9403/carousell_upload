#!/bin/bash
# =============================================================================
# Carousell Uploader - 通用安装脚本
# =============================================================================
# 自动检测操作系统并调用相应的安装脚本
# 支持系统: Windows, macOS, Linux
# 版本: 2.0.0
# 作者: Carousell Uploader Team
# =============================================================================

set -e

# =============================================================================
# 全局配置
# =============================================================================
SCRIPT_VERSION="2.0.0"
PROJECT_NAME="Carousell Uploader"

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# =============================================================================
# 工具函数
# =============================================================================

print_header() {
    echo -e "${WHITE}╔══════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${WHITE}║${NC} ${CYAN}🚀 $PROJECT_NAME 通用安装脚本 v$SCRIPT_VERSION${NC} ${WHITE}║${NC}"
    echo -e "${WHITE}║${NC} ${CYAN}支持系统: Windows, macOS, Linux${NC} ${WHITE}║${NC}"
    echo -e "${WHITE}╚══════════════════════════════════════════════════════════════╝${NC}"
    echo ""
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_step() {
    echo -e "${PURPLE}🔧 $1${NC}"
}

# 检测操作系统
detect_os() {
    print_step "检测操作系统..."
    
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        OS="linux"
        print_success "检测到Linux系统"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        OS="macos"
        print_success "检测到macOS系统"
    elif [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "cygwin" ]] || [[ "$OSTYPE" == "win32" ]]; then
        OS="windows"
        print_success "检测到Windows系统"
    else
        print_error "不支持的操作系统: $OSTYPE"
        print_info "支持的系统: Linux, macOS, Windows (Git Bash/WSL)"
        exit 1
    fi
}

# 检查安装脚本
check_install_scripts() {
    print_step "检查安装脚本..."
    
    case "$OS" in
        "linux"|"macos")
            if [ -f "install.sh" ]; then
                print_success "找到Linux/macOS安装脚本: install.sh"
                INSTALL_SCRIPT="install.sh"
            else
                print_error "未找到install.sh脚本"
                exit 1
            fi
            ;;
        "windows")
            # 检查PowerShell脚本
            if [ -f "install.ps1" ]; then
                print_success "找到PowerShell安装脚本: install.ps1"
                INSTALL_SCRIPT="install.ps1"
            # 检查批处理脚本
            elif [ -f "install.bat" ]; then
                print_success "找到批处理安装脚本: install.bat"
                INSTALL_SCRIPT="install.bat"
            else
                print_error "未找到Windows安装脚本"
                exit 1
            fi
            ;;
    esac
}

# 执行安装脚本
run_install_script() {
    print_step "执行安装脚本..."
    
    case "$OS" in
        "linux"|"macos")
            print_info "执行Linux/macOS安装脚本..."
            chmod +x "$INSTALL_SCRIPT"
            ./"$INSTALL_SCRIPT"
            ;;
        "windows")
            if [[ "$INSTALL_SCRIPT" == "install.ps1" ]]; then
                print_info "执行PowerShell安装脚本..."
                # 检查PowerShell执行策略
                if ! powershell -Command "Get-ExecutionPolicy" | grep -q "Restricted"; then
                    powershell -ExecutionPolicy Bypass -File "$INSTALL_SCRIPT"
                else
                    print_warning "PowerShell执行策略受限，尝试其他方式..."
                    # 尝试使用批处理脚本
                    if [ -f "install.bat" ]; then
                        print_info "使用批处理脚本安装..."
                        ./install.bat
                    else
                        print_error "无法执行PowerShell脚本，请手动运行:"
                        print_info "  powershell -ExecutionPolicy Bypass -File install.ps1"
                        exit 1
                    fi
                fi
            elif [[ "$INSTALL_SCRIPT" == "install.bat" ]]; then
                print_info "执行批处理安装脚本..."
                ./"$INSTALL_SCRIPT"
            fi
            ;;
    esac
}

# 显示使用说明
show_usage() {
    echo ""
    print_success "🎉 安装完成！"
    echo ""
    print_info "📁 项目目录: $(pwd)"
    print_info "🐍 虚拟环境: $(pwd)/venv"
    print_info "⚙️  配置文件: $(pwd)/config/settings.yaml"
    echo ""
    
    print_info "🚀 快速使用:"
    echo ""
    
    case "$OS" in
        "windows")
            echo "1. 激活虚拟环境:"
            echo "   cd $(pwd)"
            echo "   .\\activate_env.bat"
            echo ""
            echo "2. 或直接运行:"
            echo "   cd $(pwd)"
            echo "   .\\run.bat"
            echo ""
            echo "3. 配置设置:"
            echo "   notepad $(pwd)\\config\\settings.yaml"
            ;;
        *)
            echo "1. 激活虚拟环境:"
            echo "   cd $(pwd)"
            echo "   source ./activate_env.sh"
            echo ""
            echo "2. 或直接运行:"
            echo "   cd $(pwd)"
            echo "   ./run.sh"
            echo ""
            echo "3. 配置设置:"
            echo "   nano $(pwd)/config/settings.yaml"
            ;;
    esac
    
    echo ""
    print_info "📚 更多信息:"
    echo "- 项目文档: README.md"
    echo "- 配置说明: config/settings.example.yaml"
    echo "- 问题反馈: https://github.com/maxliu9403/carousell_upload/issues"
    echo ""
    print_success "安装完成！开始使用 Carousell Uploader 吧！"
}

# 主函数
main() {
    print_header
    
    # 检测操作系统
    detect_os
    
    # 检查安装脚本
    check_install_scripts
    
    # 执行安装脚本
    run_install_script
    
    # 显示使用说明
    show_usage
}

# 错误处理
trap 'print_error "安装过程中发生错误，请检查上述输出信息"; exit 1' ERR

# 运行主函数
main "$@"

